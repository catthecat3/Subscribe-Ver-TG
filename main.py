import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Contact
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError, BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ù–ê–°–¢–†–û–ô–ö–ò - —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–∏ –∑–Ω–∞—á–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME', '@your_channel')
OWNER_CHAT_ID = int(os.getenv('OWNER_CHAT_ID', '123456789'))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!", callback_data='check_sub')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""üî• –ü—Ä–∏–≤–µ—Ç! 

–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:

üì¢ {CHANNEL_USERNAME}

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    first_name = query.from_user.first_name or "–î—Ä—É–≥"
    username = query.from_user.username or "–Ω–µ—Ç username"
    
    try:
        chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        
        if chat_member.status in ['member', 'administrator', 'creator']:
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –ø–æ–¥–ø–∏—Å–∞–Ω")
            
            keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)
            
            await query.message.reply_text(
                f"""üéâ –û—Ç–ª–∏—á–Ω–æ, {first_name}! 

–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è!

üìù –¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:""",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            try:
                await query.message.delete()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
        else:
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
            
            retry_count = context.user_data.get('retry_count', 0)
            context.user_data['retry_count'] = retry_count + 1
            
            new_text = f"""‚ö†Ô∏è {first_name}, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}!

üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞!

(–ü–æ–ø—ã—Ç–∫–∞ #{retry_count + 1})"""
            
            keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_sub')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                await query.edit_message_text(new_text, reply_markup=reply_markup, parse_mode='HTML')
            except BadRequest as e:
                if "message is not modified" in str(e).lower():
                    await query.message.reply_text(new_text, reply_markup=reply_markup, parse_mode='HTML')
                else:
                    await query.message.reply_text(new_text, reply_markup=reply_markup, parse_mode='HTML')
            except Exception:
                await query.message.reply_text(new_text, reply_markup=reply_markup, parse_mode='HTML')
            
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        error_text = f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É, {first_name}!

üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."""

keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_sub')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(error_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception:
            await query.message.reply_text(error_text, reply_markup=reply_markup, parse_mode='HTML')
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        error_text = f"""‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, {first_name}!

üîß –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É:"""
        
        keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_sub')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(error_text, reply_markup=reply_markup, parse_mode='HTML')
        except Exception:
            await query.message.reply_text(error_text, reply_markup=reply_markup, parse_mode='HTML')

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = update.message.contact
    user = update.effective_user
    
    text = f"""üì± <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!</b>

üë§ <b>–ò–º—è:</b> {contact.first_name}
üë§ <b>–§–∞–º–∏–ª–∏—è:</b> {contact.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{contact.phone_number}</code>
üÜî <b>User ID:</b> <code>{user.id}</code>
üîó <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ <b>–î–∞—Ç–∞:</b> {update.message.date.strftime('%d.%m.%Y %H:%M')}"""
    
    try:
        await context.bot.send_contact(chat_id=OWNER_CHAT_ID, contact=contact)
        await context.bot.send_message(chat_id=OWNER_CHAT_ID, text=text, parse_mode='HTML')
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {contact.phone_number}")
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
        try:
            await context.bot.send_message(
                chat_id=OWNER_CHAT_ID,
                text=f"üì± <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)!</b>\n\n{text}",
                parse_mode='HTML'
            )
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    if 'retry_count' in context.user_data:
        del context.user_data['retry_count']
    
    markup = ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        f"""‚úÖ –°–ø–∞—Å–∏–±–æ, {contact.first_name}! 

–¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.

üéÅ –°–∫–æ—Ä–æ —Å —Ç–æ–±–æ–π —Å–≤—è–∂—É—Ç—Å—è!""",
        reply_markup=markup,
        parse_mode='HTML'
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É {context.error}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not BOT_TOKEN or BOT_TOKEN == '–≤–∞—à_—Ç–æ–∫–µ–Ω_–∑–¥–µ—Å—å':
        logger.error("‚ùå BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not CHANNEL_USERNAME or CHANNEL_USERNAME == '@your_channel':
        logger.error("‚ùå CHANNEL_USERNAME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if OWNER_CHAT_ID == 123456789:
        logger.error("‚ùå OWNER_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    application = Application.builder().token(BOT_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern='^check_sub$'))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_error_handler(error_handler)
    
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª: {CHANNEL_USERNAME}")
    logger.info(f"üë§ –í–ª–∞–¥–µ–ª–µ—Ü: {OWNER_CHAT_ID}")
    
    application.run_polling(
        drop_pending_updates=True,
        poll_interval=1.0,
        timeout=10,
        bootstrap_retries=5
    )

if name == '__main__':
    main()