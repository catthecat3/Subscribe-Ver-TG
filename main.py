import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, Contact
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
from telegram.error import TelegramError, BadRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–¢–õ–ê–î–ö–ê: –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
logger.info("üîç DEBUG: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –Ω–∞ Railway...")
logger.info(f"üîç DEBUG: –í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
for key in os.environ:
    if any(x in key.upper() for x in ['BOT', 'CHANNEL', 'OWNER', 'TELEGRAM']):
        value = os.getenv(key)
        display_value = "***" if len(value or "") > 5 else value
        logger.info(f"üîç DEBUG: {key} = {display_value}")

# –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø (RAILWAY)
BOT_TOKEN = os.getenv('BOT_TOKEN')
CHANNEL_USERNAME = os.getenv('CHANNEL_USERNAME')
OWNER_CHAT_ID = os.getenv('OWNER_CHAT_ID', '0')

# –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
logger.info(f"üîç DEBUG: BOT_TOKEN: {'–ù–ê–ô–î–ï–ù' if BOT_TOKEN else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'} (–¥–ª–∏–Ω–∞: {len(BOT_TOKEN) if BOT_TOKEN else 0})")
logger.info(f"üîç DEBUG: CHANNEL_USERNAME: {'–ù–ê–ô–î–ï–ù' if CHANNEL_USERNAME else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'} (–∑–Ω–∞—á–µ–Ω–∏–µ: '{CHANNEL_USERNAME}')")
logger.info(f"üîç DEBUG: OWNER_CHAT_ID: {'–ù–ê–ô–î–ï–ù' if OWNER_CHAT_ID else '–û–¢–°–£–¢–°–¢–í–£–ï–¢'} (–∑–Ω–∞—á–µ–Ω–∏–µ: '{OWNER_CHAT_ID}')")

# –ì–õ–ê–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê (–¢–û–ß–ù–û –ö–ê–ö –í –†–ê–ë–û–ß–ï–ú –í–ê–†–ò–ê–ù–¢–ï)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª"""
    keyboard = [
        [InlineKeyboardButton("üìå–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
        [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è/-–∞—Å—å üôÇ‚Äç‚ÜïÔ∏è", callback_data='check_sub')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = f"""–ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ***! üôå 
–Ø - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ú–∞—Ä–∏–Ω—ã –ö—É–∑—å–º–∏–Ω–∏—á–Ω—ã.

–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–±–æ—Ä, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:

–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"""
    
    await update.message.reply_text(text, reply_markup=reply_markup, parse_mode='HTML')

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    first_name = query.from_user.first_name or "–î—Ä—É–≥"
    username = query.from_user.username or "–Ω–µ—Ç username"
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        chat_member = await context.bot.get_chat_member(CHANNEL_USERNAME, user_id)
        
        if chat_member.status in ['member', 'administrator', 'creator']:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω - –ø—Ä–æ—Å–∏–º –∫–æ–Ω—Ç–∞–∫—Ç
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –ø–æ–¥–ø–∏—Å–∞–Ω")
            
            keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]
            reply_markup = ReplyKeyboardMarkup(
                keyboard, 
                resize_keyboard=True, 
                one_time_keyboard=True
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–∞
            await query.message.reply_text(
                f"""üéâ –ü—Ä–µ–∫—Ä–∞—Å–Ω–æ, {first_name}! 

–í–∏–∂—É –í–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É!

üìù –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.:""",
                –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            try:
                await query.message.delete()
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
            logger.info(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} (@{username}) –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –ø–æ–ø—ã—Ç–æ–∫
            retry_count = context.user_data.get('retry_count', 0)
            context.user_data['retry_count'] = retry_count + 1
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "Message is not modified"
            new_text = f"""‚ö†Ô∏è {first_name}, –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å..

üì¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! {CHANNEL_USERNAME}!

(–ü–æ–ø—ã—Ç–∫–∞ #{retry_count + 1})"""
            
            keyboard = [
                [InlineKeyboardButton("üìå–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url=f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}")],
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_sub')]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=new_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            except BadRequest as e:
                if "message is not modified" in str(e).lower():
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                    await query.message.reply_text(
                        new_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
                else:
                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ BadRequest —Ç–æ–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await query.message.reply_text(
                        new_text,
                        reply_markup=reply_markup,
                        parse_mode='HTML'
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.message.reply_text(
                    new_text,
                    reply_markup=reply_markup,
                    parse_mode='HTML'
                )
            
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
        error_text = f"""‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É, {first_name}!

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
‚Ä¢ –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∫–∞–Ω–∞–ª–∞
‚Ä¢ –ö–∞–Ω–∞–ª –ø—Ä–∏–≤–∞—Ç–Ω—ã–π

üîß –†–µ—à–µ–Ω–∏–µ: 
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—É–±–ª–∏—á–Ω—ã–π ({CHANNEL_USERNAME})
2. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."""
        
        keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_sub')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception:
            await query.message.reply_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ {user_id}: {e}")
        
        error_text = f"""‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, {first_name}!

üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–æ–±–ª–µ–º–æ–π.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É:"""
        
        keyboard = [[InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data='check_sub')]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        except Exception:
            await query.message.reply_text(
                error_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

async def contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
    contact = update.message.contact
    user = update.effective_user
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
    text = f"""üì± <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç!</b>

üë§ <b>–ò–º—è:</b> {contact.first_name}
üë§ <b>–§–∞–º–∏–ª–∏—è:</b> {contact.last_name or '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{contact.phone_number}</code>
üÜî <b>User ID:</b> <code>{user.id}</code>
üîó <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üìÖ <b>–î–∞—Ç–∞:</b> {update.message.date.strftime('%d.%m.%Y %H:%M')}"""
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É
        await context.bot.send_contact(
            chat_id=OWNER_CHAT_ID,
            contact=contact
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏
        await context.bot.send_message(
            chat_id=OWNER_CHAT_ID,
            text=text,
            parse_mode='HTML'
        )
        
        logger.info(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {contact.phone_number}")
        
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤–ª–∞–¥–µ–ª—å—Ü—É: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await context.bot.send_message(
                chat_id=OWNER_CHAT_ID,
                text=f"üì± <b>–ù–æ–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç)!</b>\n\n{text}",
                parse_mode='HTML'
            )
            logger.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e2:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
    if 'retry_count' in context.user_data:
        del context.user_data['retry_count']
    
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –±–ª–∞–≥–æ–¥–∞—Ä–∏–º
    markup = ReplyKeyboardMarkup([[]], resize_keyboard=True, one_time_keyboard=True)
    
    await update.message.reply_text(
        f"""‚úÖ –û—Ç–ª–∏—á–Ω–æ! {contact.first_name}! 

–ü–µ—Ä–µ–¥–∞–ª –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ú–∞—Ä–∏–Ω–µ –ö—É–∑—å–º–∏–Ω–∏—á–Ω–µ!

üôå –í —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç –æ–Ω–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∏ –∑–∞–ø–∏—à–µ—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!""",
        reply_markup=markup,
        parse_mode='HTML'
    )

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ {update} –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É {context.error}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ callback_query, –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if update and hasattr(update, 'callback_query') and update.callback_query:
        try:
            await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        except Exception:
            pass

def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è Railway"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not BOT_TOKEN:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω BOT_TOKEN!")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard ‚Üí Variables")
        logger.error(f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: Variable Name = BOT_TOKEN")
        return
    
    if not CHANNEL_USERNAME:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω CHANNEL_USERNAME!")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard ‚Üí Variables")
        logger.error(f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: Variable Name = CHANNEL_USERNAME, Value = @avitotest1809")
        return
    
    try:
        owner_id = int(OWNER_CHAT_ID)
        logger.info(f"‚úÖ OWNER_CHAT_ID –≤–∞–ª–∏–¥–µ–Ω: {owner_id}")
    except ValueError:
        logger.error("‚ùå –û–®–ò–ë–ö–ê: OWNER_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        logger.error("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ Railway Dashboard ‚Üí Variables")
        logger.error(f"üîß –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: Variable Name = OWNER_CHAT_ID, Value = 788399571")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler, pattern='^check_sub$'))
    application.add_handler(MessageHandler(filters.CONTACT, contact_handler))
    application.add_error_handler(error_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    logger.info(f"üì¢ –ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHANNEL_USERNAME}")
    logger.info(f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {OWNER_CHAT_ID}")
    logger.info("üì± –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –≤ Telegram")
    logger.info("=" * 60)
    
    # –ó–∞–ø—É—Å–∫ polling —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è Railway
    application.run_polling(
        drop_pending_updates=True,
        poll_interval=1.0,
        timeout=10,
        bootstrap_retries=5,
        allowed_updates=Update.ALL_TYPES
    )

# –ó–ê–ü–£–°–ö –ë–û–¢–ê
if __name__ == '__main__':
    run_bot()
